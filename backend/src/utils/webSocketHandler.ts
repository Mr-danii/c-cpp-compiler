/**
 * Socket.IO Handler
 * Centralized utilities for Socket.IO communication
 */
import { Server as SocketIOServer, Socket } from "socket.io";
import { EventEmitter } from "events";
import http from "http";

// Define Socket interface with session data
export interface SessionSocket extends Socket {
  sessionId: string;
}

// Events emitter for cross-component communication
export const socketEvents = new EventEmitter();

// Event types for strong typing
export enum SocketEvents {
  // Connection lifecycle events
  CONNECT = "connect",
  DISCONNECT = "disconnect",

  // Compilation events
  COMPILE = "compile",
  COMPILING = "compiling",
  COMPILE_SUCCESS = "compile_success",
  COMPILE_ERROR = "compile_error",

  // Execution events
  OUTPUT = "output",
  INPUT = "input",
  EXIT = "exit",
  RESIZE = "resize",

  // Session management
  SESSION_CREATED = "session_created",
  CLEANUP = "cleanup",
  CLEANUP_COMPLETE = "cleanup_complete",

  // Error handling
  ERROR = "error",
}

/**
 * Create and configure a Socket.IO server
 * @param {http.Server} server - HTTP server to attach Socket.IO
 * @returns {SocketIOServer} Configured Socket.IO server
 */
export const createSocketServer = (server: http.Server): SocketIOServer => {
  const io = new SocketIOServer(server, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"],
    },
    transports: ["websocket", "polling"],
  });

  // Set up connection handler
  io.on(SocketEvents.CONNECT, (socket: Socket) => {
    // Initialize socket with session ID (UUID will be generated by the message handler)
    const sessionSocket = socket as SessionSocket;

    // Log connection
    console.log(`New socket connection: ${socket.id}`);

    // Handle disconnect
    socket.on(SocketEvents.DISCONNECT, (reason) => {
      console.log(
        `Socket ${sessionSocket.sessionId || socket.id} disconnected: ${reason}`
      );
      socketEvents.emit("socket-disconnect", {
        socketId: socket.id,
        sessionId: sessionSocket.sessionId,
      });
    });

    // Emit internal event about new connection
    socketEvents.emit("socket-connect", {
      socketId: socket.id,
      socket: sessionSocket,
    });
  });

  return io;
};

/**
 * Send a message to a client
 * @param {Socket} socket - Socket.IO socket
 * @param {string} event - Event name
 * @param {any} data - Data to send
 */
export const emitToClient = (
  socket: Socket,
  event: string,
  data: any
): void => {
  if (socket && socket.connected) {
    socket.emit(event, data);
  }
};
