@startuml Architecture

!define LAYOUT_LEFT_RIGHT
skinparam nodesep 20
skinparam ranksep 25
skinparam padding 2
skinparam defaultFontName Arial
skinparam defaultFontSize 11
skinparam componentStyle uml2
skinparam linetype ortho
skinparam maxMessageSize 150
skinparam wrapWidth 200

' Define main actors and components
actor "User" as User
component "Browser" as Browser

' Define Frontend UI layer
rectangle "Frontend (UI)" {
  ' Core UI components
  package "UI Components" {
    component "Code Editor\n(CodeMirror)" as Editor
    component "Terminal\n(Xterm.js)" as Terminal
    component "Result Display" as Display
    component "Layout Manager" as LayoutMgr
    component "Themes Manager" as ThemesMgr
    component "Templates Selector" as TemplateSelector
    component "Shortcut Manager" as ShortcutMgr
  }
  
  ' User action buttons and controls
  package "Actions" {
    component "Compile & Run" as CompileAction
    component "Memory Check" as MemcheckAction
    component "Format" as FormatAction
    component "Style Check" as StyleCheckAction
    component "View Assembly" as AssemblyAction
    component "Zen Mode" as ZenModeAction
    component "Code Snapshot" as SnapshotAction
  }
  
  ' Client-side controllers
  package "Controllers" {
    component "App Controller" as AppController
    component "Code Actions Controller" as CodeActionsController
    component "Editor Settings Controller" as SettingsController
    component "State Manager" as StateManager
  }
  
  ' Communication
  component "WebSocket Client" as WSClient
  component "Compile Socket Manager" as CompileSocketMgr
  component "HTTP Client" as HTTPClient
}

' Define Backend layer
rectangle "Backend (Server)" {
  component "Koa Server" as Koa
  component "WebSocket Server" as WSServer
  component "Socket.IO" as SocketIO
  
  ' API Routes layer
  package "API Routes" {
    component "Compile API" as CompileAPI
    component "Memory Check API" as MemcheckAPI
    component "Format API" as FormatAPI
    component "Style Check API" as StyleAPI
    component "Assembly API" as AssemblyAPI
    component "Templates API" as TemplatesAPI
  }
  
  ' Services layer
  package "Services" {
    component "Compilation Service" as CompileService
    component "Memory Check Service" as MemcheckService
    component "Format Service" as FormatService
    component "Style Check Service" as StyleService
    component "Assembly Service" as AssemblyService
    component "PTY Service" as PTYService
    component "Route Handler" as RouteHandler
  }
  
  component "Session Manager" as SessionMgr
  component "Temp File Manager" as TempMgr
  component "WebSocket Handler" as WSHandler
}

' Define External Tools layer
rectangle "External Tools" {
  component "GCC/G++" as GCC
  component "Clang/Clang++" as Clang
  component "Valgrind" as Valgrind
  component "clang-format" as ClangFormat
  component "cppcheck" as Cppcheck
  component "Node-PTY" as NodePTY
}

database "Temporary Files" as TempFiles
database "Active Sessions" as Sessions
database "Code Templates" as Templates

' Define relationships

' User interaction
User --> Browser : Interacts with
Browser --> Editor : Writes code

' User actions trigger frontend actions
User --> CompileAction : Clicks
User --> MemcheckAction : Clicks
User --> FormatAction : Clicks
User --> StyleCheckAction : Clicks
User --> AssemblyAction : Clicks
User --> ZenModeAction : Clicks
User --> SnapshotAction : Clicks

' Frontend components interaction
AppController --> StateManager : Manages state
AppController --> CodeActionsController : Uses
AppController --> SettingsController : Uses
CodeActionsController --> CompileSocketMgr : Uses
CodeActionsController --> HTTPClient : Uses for API calls
Editor --> ShortcutMgr : Processes keyboard shortcuts
ShortcutMgr --> ZenModeAction : Triggers
ShortcutMgr --> CompileAction : Triggers
ShortcutMgr --> SnapshotAction : Triggers
LayoutMgr --> Editor : Controls layout
LayoutMgr --> Terminal : Controls layout
ThemesMgr --> Editor : Applies themes
TemplateSelector --> Editor : Loads templates

' Frontend actions to communication layer
CompileAction --> CompileSocketMgr : Triggers
AssemblyAction --> CompileSocketMgr : Triggers
ZenModeAction --> LayoutMgr : Triggers layout change
CompileSocketMgr --> WSClient : Uses
MemcheckAction --> HTTPClient : HTTP Request
FormatAction --> HTTPClient : HTTP Request
StyleCheckAction --> HTTPClient : HTTP Request
SnapshotAction --> Display : Generates image

' Frontend to Backend communication
WSClient <--> SocketIO : WebSocket connection
HTTPClient <--> Koa : HTTP/RESTful API
SocketIO --> WSServer : Integrated with

' Backend routing
Koa --> RouteHandler : Processes HTTP requests
Koa --> MemcheckAPI : Routes to
Koa --> FormatAPI : Routes to
Koa --> StyleAPI : Routes to
Koa --> AssemblyAPI : Routes to
Koa --> TemplatesAPI : Routes to
WSServer --> WSHandler : Routes WebSocket messages

' WebSocket handler to services
WSHandler --> CompileService : Invokes for compilation
WSHandler --> PTYService : For interactive execution
WSHandler --> SessionMgr : Manages sessions

' KOA API routes to Services calls
MemcheckAPI --> MemcheckService : Invokes
FormatAPI --> FormatService : Invokes
StyleAPI --> StyleService : Invokes
AssemblyAPI --> AssemblyService : Invokes
TemplatesAPI --> Templates : Retrieves

' Services to External Tools calls
CompileService --> GCC : Executes
CompileService --> Clang : Executes
AssemblyService --> GCC : Generates assembly
AssemblyService --> Clang : Generates assembly
MemcheckService --> Valgrind : Executes
FormatService --> ClangFormat : Executes
StyleService --> Cppcheck : Executes
PTYService --> NodePTY : Creates terminal

' File and Session management
CompileService --> TempMgr : Creates temp files
MemcheckService --> TempMgr : Creates temp files
FormatService --> TempMgr : Creates temp files
StyleService --> TempMgr : Creates temp files
AssemblyService --> TempMgr : Creates temp files
TempMgr --> TempFiles : Manages
SessionMgr --> Sessions : Tracks
PTYService --> SessionMgr : Uses

' Results flow back to frontend
WSHandler --> WSServer : Sends compilation results
WSServer --> WSClient : Streams compilation results
WSClient --> CompileSocketMgr : Processes events
CompileSocketMgr --> Display : Updates UI
CompileSocketMgr --> Terminal : Updates terminal
CompileSocketMgr --> StateManager : Updates state

MemcheckAPI --> HTTPClient : Returns HTTP response
FormatAPI --> HTTPClient : Returns HTTP response
StyleAPI --> HTTPClient : Returns HTTP response
AssemblyAPI --> HTTPClient : Returns HTTP response

' Interactive terminal
Terminal --> WSClient : Sends input
WSClient --> WSServer : Transmits input
WSServer --> WSHandler : Routes input
WSHandler --> PTYService : Processes input
PTYService --> NodePTY : Sends to process

@enduml