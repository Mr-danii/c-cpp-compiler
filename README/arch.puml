@startuml Architecture

' Layout configuration
skinparam backgroundColor white
skinparam shadowing false
skinparam nodesep 12
skinparam ranksep 18
skinparam padding 2
skinparam defaultFontName Arial
skinparam defaultFontSize 10
skinparam componentStyle rectangle
skinparam linetype ortho
skinparam arrowColor #666666
skinparam maxMessageSize 100
skinparam wrapWidth 150
skinparam roundCorner 4

' Component styling
skinparam rectangle {
  BackgroundColor #F8F8F8
  BorderColor #CCCCCC
}

skinparam package {
  BackgroundColor #FEFEFE
  BorderColor #AAAAAA
  FontColor #333333
  FontStyle bold
}

skinparam component {
  BackgroundColor #FFFFFF
  BorderColor #999999
}

skinparam database {
  BackgroundColor #E8F4FF
  BorderColor #4A8FCC
}

' Main actors and components
actor "User" as User
component "Browser" as Browser

' Frontend UI layer - Enhanced to match project structure
rectangle "Frontend (UI)" #E0F0FF {
  ' Core UI components - Based on actual frontend/ts files
  package "UI Components" {
    component "Editor (CodeMirror)" as Editor
    component "Terminal (Xterm.js)" as Terminal
    component "Result Display" as Display
    component "Layout Manager" as LayoutMgr
    component "Theme Manager" as ThemesMgr
    component "Template Selector" as TemplateSelector
    component "Shortcut Manager" as ShortcutMgr
  }
  
  ' User actions - Based on handlers.ts
  package "Actions" {
    component "Compile & Run" as CompileAction
    component "Leak Detection" as LeakDetectAction
    component "Format" as FormatAction
    component "Style Check" as StyleCheckAction
    component "Assembly" as AssemblyAction
    component "Debug" as DebugAction
    component "Zen Mode" as ZenModeAction
    component "Snapshot" as SnapshotAction
  }
  
  ' Client-side controllers
  package "Controllers" {
    component "App Controller" as AppController
    component "Code Actions" as CodeActionsController
    component "Debug Controller" as DebugController
    component "Settings" as SettingsController
    component "State Manager" as StateManager
  }
  
  ' Communication layer - Based on actual socket files
  component "WebSocket Client" as WSClient
  component "Compile Socket" as CompileSocketMgr
  component "Debug Socket" as DebugSocketMgr
  component "LeakDetect Socket" as LeakDetectSocketMgr
  component "HTTP Client" as HTTPClient
}

' Backend layer - Enhanced to match project structure
rectangle "Backend (Server)" #F0F0FF {
  component "Koa Server" as Koa
  component "WebSocket Server" as WSServer
  component "Socket.IO" as SocketIO
  
  ' API Routes - Based on backend/src/routes
  package "API Routes" as ApiRoutes {
    component "Assembly API" as AssemblyAPI
    component "Format API" as FormatAPI
    component "Style Check API" as StyleAPI
    component "Templates API" as TemplatesAPI
  }
  
  ' Services - Based on backend/src/utils and backend/src/ws
  package "Services" {
    component "Compilation Service" as CompileService
    component "WebSocket Handler" as WSHandler
    component "Route Handler" as RouteHandler
    component "Session Service" as SessionService
    component "Debug Service" as DebugService
    component "Memory Check Service" as MemcheckService
    component "Format" as FormatService
    component "Style Check" as StyleService
    component "Assembly" as AssemblyService
    component "PTY Service" as PTYService
  }
  
  ' WebSocket Handlers
  package "WebSocket Handlers" {
    component "Base Socket Handler" as BaseSocketHandler
    component "Compile Socket Handler" as CompileSocketHandler
    component "Debug Socket Handler" as DebugSocketHandler
    component "LeakDetect Socket Handler" as LeakDetectHandler
  }
  
  component "Session Manager" as SessionMgr
  component "Temp Files Manager" as TempMgr
}

' External Tools - More accurately represented
rectangle "External Tools" #FFF8E0 {
  component "GCC/G++" as GCC
  component "Clang/Clang++" as Clang
  component "Valgrind" as Valgrind
  component "clang-format" as ClangFormat
  component "cppcheck" as Cppcheck
  component "GDB" as GDB
  component "Node-PTY" as NodePTY
}

' Databases and storage
database "Temp Files" as TempFiles
database "Sessions" as Sessions
database "Code Templates" as Templates

' Key relationships - Enhanced to show more accurate flows
' User interaction
User --> Browser : Interacts with
Browser --> Editor : Writes code

' Frontend key connections
AppController --> StateManager : Manages app state
CodeActionsController --> CompileSocketMgr : Handles compile requests
DebugController --> DebugSocketMgr : Handles debug requests
AppController --> LeakDetectSocketMgr : Handles leak detection
Editor --> ShortcutMgr : Registers keyboard shortcuts
Editor --> TemplateSelector : Loads code templates

' Action flows
CompileAction --> CodeActionsController : Triggers compilation
DebugAction --> DebugController : Triggers debugging
LeakDetectAction --> LeakDetectSocketMgr : Triggers leak detection
FormatAction --> HTTPClient : Makes HTTP request
StyleCheckAction --> HTTPClient : Makes HTTP request
AssemblyAction --> HTTPClient : Makes HTTP request

' Frontend to backend
WSClient --> WSServer : WebSocket communication
WSServer --> WSClient : Bidirectional data
HTTPClient --> ApiRoutes : RESTful requests
ApiRoutes --> HTTPClient : JSON responses

' WebSocket specialized handlers
BaseSocketHandler <|-- CompileSocketHandler : extends
BaseSocketHandler <|-- DebugSocketHandler : extends
BaseSocketHandler <|-- LeakDetectHandler : extends

' Backend routing
Koa --> RouteHandler : HTTP request handling
WSServer --> WSHandler : WebSocket handling
WSHandler --> CompileSocketHandler : Compilation messages
WSHandler --> DebugSocketHandler : Debugging messages
WSHandler --> LeakDetectHandler : Leak detection messages
ApiRoutes --> Services : Service invocation
CompileSocketHandler --> CompileService : Compilation requests
DebugSocketHandler --> DebugService : Debugging requests
LeakDetectHandler --> MemcheckService : Leak detection requests
WSHandler --> SessionService : Session management

' Services to external tools
CompileService --> GCC : Code compilation
CompileService --> Clang : Alternative compiler
DebugService --> GDB : Interactive debugging
MemcheckService --> Valgrind : Memory checking
FormatService --> ClangFormat : Code formatting
StyleService --> Cppcheck : Style analysis
AssemblyService --> GCC : Assembly generation
PTYService --> NodePTY : Terminal emulation

' File and resource management
CompileService --> TempMgr : Creates temp files
DebugService --> TempMgr : Debug files
MemcheckService --> TempMgr : Memory check files
TempMgr --> TempFiles : File storage
SessionMgr --> Sessions : Session storage
TemplatesAPI --> Templates : Retrieves templates

' Results flow back to frontend
WSClient --> CompileSocketMgr : Compilation results
WSClient --> DebugSocketMgr : Debug data
WSClient --> LeakDetectSocketMgr : Leak detection data
CompileSocketMgr --> Display : Updates UI with compilation results
DebugSocketMgr --> Terminal : Shows debug output
LeakDetectSocketMgr --> Display : Shows leak detection results

@enduml