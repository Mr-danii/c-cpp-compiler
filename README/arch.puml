@startuml Architecture

!define LAYOUT_TOP_DOWN
skinparam nodesep 30
skinparam ranksep 35
skinparam padding 2
skinparam defaultFontName Arial
skinparam defaultFontSize 12

' Define main actors and components
actor "User" as User
component "Browser" as Browser

' Define Frontend UI layer
rectangle "Frontend (UI)" {
  component "Code Editor (CodeMirror)" as Editor
  component "Terminal (Xterm.js)" as Terminal
  component "Result Display" as Display
  
  ' User action buttons
  component "Actions" {
    component "Compile & Run" as CompileAction
    component "Memory Check" as MemcheckAction
    component "Format" as FormatAction
    component "Style Check" as StyleCheckAction
    component "View Assembly" as AssemblyAction
  }
  
  component "WebSocket Client" as WSClient
}

' Define Backend layer
rectangle "Backend (Server)" {
  component "Express Server" as Express
  component "WebSocket Server" as WSServer
  
  ' API Routes layer
  package "API Routes" {
    component "Compile API" as CompileAPI
    component "Memory Check API" as MemcheckAPI
    component "Format API" as FormatAPI
    component "Style Check API" as StyleAPI
    component "Templates API" as TemplatesAPI
  }
  
  ' Services layer
  package "Services" {
    component "Compilation Service" as CompileService
    component "Memory Check Service" as MemcheckService
    component "Format Service" as FormatService
    component "Style Check Service" as StyleService
    component "PTY Service" as PTYService
  }
  
  package "Utilities" {
    component "Helpers" as Utils
    component "Session Manager" as SessionMgr
  }
  
  component "Templates Repository" as Templates
  component "Temp File Manager" as TempMgr
}

' Define External Tools layer
rectangle "External Tools" {
  component "GCC/G++" as GCC
  component "Clang/Clang++" as Clang
  component "Valgrind" as Valgrind
  component "clang-format" as ClangFormat
  component "cppcheck" as Cppcheck
  component "Node-PTY" as NodePTY
}

' Define Deployment layer
rectangle "Deployment" {
  component "Docker" as Docker
  component "Nginx" as Nginx
}

database "Temporary Files" as TempFiles
database "Active Sessions" as Sessions

' Define relationships

' User interaction
User --> Browser : Interacts with
Browser --> Editor : Writes code

' User actions trigger frontend actions
User --> CompileAction : Clicks
User --> MemcheckAction : Clicks
User --> FormatAction : Clicks
User --> StyleCheckAction : Clicks
User --> AssemblyAction : Clicks

' Frontend actions to API calls
CompileAction --> WSClient : Triggers
MemcheckAction --> CompileAPI : HTTP Request
FormatAction --> FormatAPI : HTTP Request
StyleCheckAction --> StyleAPI : HTTP Request
AssemblyAction --> CompileAPI : HTTP Request

' Frontend to Backend communication
WSClient <--> WSServer : WebSocket connection
Browser <--> Express : HTTP/RESTful API

' API routes to Services calls
CompileAPI --> CompileService : Invokes
MemcheckAPI --> MemcheckService : Invokes
FormatAPI --> FormatService : Invokes
StyleAPI --> StyleService : Invokes
CompileAPI --> PTYService : For interactive execution

' Services to External Tools calls
CompileService --> GCC : Executes
CompileService --> Clang : Executes
MemcheckService --> Valgrind : Executes
FormatService --> ClangFormat : Executes
StyleService --> Cppcheck : Executes
PTYService --> NodePTY : Creates terminal

' File and Session management
CompileService --> TempMgr : Creates temp files
MemcheckService --> TempMgr : Creates temp files
FormatService --> TempMgr : Creates temp files
StyleService --> TempMgr : Creates temp files
TempMgr --> TempFiles : Manages
SessionMgr --> Sessions : Tracks
PTYService --> SessionMgr : Uses

' Results return to frontend
CompileService --> CompileAPI : Returns results
MemcheckService --> MemcheckAPI : Returns results
FormatService --> FormatAPI : Returns results
StyleService --> StyleAPI : Returns results

CompileAPI --> Display : Updates UI
MemcheckAPI --> Display : Updates UI
FormatAPI --> Editor : Updates code
StyleAPI --> Display : Updates UI

' Interactive terminal
WSServer --> Terminal : Streams output
Terminal --> WSServer : Sends input
Browser <--> Terminal : Interactive I/O

' Deployment related
Nginx --> Express : Reverse proxy
Docker --> Express : Contains
Docker --> WSServer : Contains

@enduml