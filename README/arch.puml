@startuml Architecture

' Define actors and components
actor "User" as User
component "Browser" as Browser

rectangle "Frontend" {
  component "HTML/CSS/TS" as StaticFiles
  component "CodeMirror Editor" as Editor
  component "Xterm.js Terminal" as Terminal
  component "Result Display" as Display
  component "Request Processing" as FrontProc
  component "Asset Bundling (Webpack)" as AssetBundle
  
  component "WebSocket Connection Manager" as WsManager {
    component "Heartbeat System" as HeartbeatClient
    component "Auto-Reconnection" as Reconnect
  }
}

rectangle "Backend" {
  component "Express Server" as Express
  component "WebSocket Server" as WSServer
  
  component "WebSocket Health Monitor" as WsMonitor {
    component "Connection Tracking" as ConnTracker
    component "Ping/Pong System" as HeartbeatServer
  }
  
  package "API Routes (routes/)" {
    component "Compile API" as CompileAPI
    component "Memory Check API" as MemcheckAPI
    component "Format API" as FormatAPI
    component "Style Check API" as StyleAPI
  }
  
  package "Services" {
    component "Compilation Service" as CompileService
    component "Memory Check Service" as MemcheckService
    component "Format Service" as FormatService
    component "Style Check Service" as StyleService
    component "PTY Service" as PTYService
  }
  
  component "Temp File Manager" as TempMgr
  component "Session Manager" as SessionMgr
  component "Utilities (utils/)" as Utils
}

rectangle "External Tools" {
  component "GCC/G++" as GCC
  component "Clang/Clang++" as Clang
  component "Valgrind" as Valgrind
  component "clang-format" as ClangFormat
  component "cppcheck" as Cppcheck
  component "Node-PTY" as NodePTY
}

rectangle "Server Infrastructure" {
  component "Nginx (Reverse Proxy)" as Nginx
}

database "Temporary Files" as TempFiles
database "Active Sessions" as Sessions

' Define relationships
User --> Browser
Browser --> StaticFiles : Loads
Browser --> Editor : Inputs code
Browser <--> Terminal : Interactive I/O

' Frontend connections
AssetBundle --> StaticFiles : Bundles JS/CSS
Editor --> FrontProc : Submit for processing
FrontProc --> Express : HTTP POST requests
FrontProc --> WsManager : Send code for interactive execution
FrontProc --> Display : Present results

' WebSocket Connection Management
WsManager --> WSServer : Maintains persistent connection
HeartbeatClient --> HeartbeatServer : Sends periodic pings
HeartbeatServer --> HeartbeatClient : Responds with pongs
Reconnect --> WsManager : Handles connection failures
WsManager --> Reconnect : Triggers on disconnect

' Nginx connections
Browser --> Nginx : HTTP/HTTPS requests
Browser <--> WSServer : WebSocket connection
Nginx --> Express : Proxy requests to port 9527
Nginx --> WSServer : Proxy WebSocket connections

' Backend routing
Express --> CompileAPI : Route compile requests
Express --> MemcheckAPI : Route memory check requests
Express --> FormatAPI : Route format requests
Express --> StyleAPI : Route style check requests

' WebSocket server and monitoring
WSServer --> ConnTracker : Tracks connection status
ConnTracker --> HeartbeatServer : Manages timeout detection
WSServer --> WsMonitor : Inactivity detection

' API to Service connections
CompileAPI --> CompileService : Process
MemcheckAPI --> MemcheckService : Process
FormatAPI --> FormatService : Process
StyleAPI --> StyleService : Process

' Service connections
CompileService --> TempMgr : Create files
MemcheckService --> TempMgr : Create files
FormatService --> TempMgr : Create files
StyleService --> TempMgr : Create files
PTYService --> TempMgr : Create files

' External tool connections
CompileService --> GCC : Execute
CompileService --> Clang : Execute
MemcheckService --> Valgrind : Execute
FormatService --> ClangFormat : Execute
StyleService --> Cppcheck : Execute

' File and session management
TempMgr --> TempFiles : Write/Read/Manage
TempMgr --> Utils : Helper functions
SessionMgr --> Sessions : Track active sessions
SessionMgr --> TempMgr : Cleanup after sessions
TempMgr ..> TempFiles : Auto-cleanup after request
SessionMgr ..> Sessions : Auto-cleanup after disconnect

' WebSocket and PTY connections
WSServer --> SessionMgr : Create/manage sessions
WSServer --> PTYService : Interactive execution
PTYService --> NodePTY : Create pseudo-terminal
PTYService --> Sessions : Store active terminals
NodePTY --> TempFiles : Execute compiled program
WSServer --> Terminal : Send real-time output
Terminal --> WSServer : Send user input

' Results
CompileService --> FrontProc : Return results
MemcheckService --> FrontProc : Return results
FormatService --> FrontProc : Return results
StyleService --> FrontProc : Return results
FrontProc --> Display : Present results
Display --> Browser : Show output

' Resource limits note
note right of NodePTY
  Resource limits:
  - Memory: 100MB
  - CPU time: 10 seconds
  - Stack size: 8MB
  - Auto-termination for long-running processes
end note

@enduml
